// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpringerTests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("SearchTest")]
    public partial class SearchTestFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "SearchTest.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "SearchTest", "\tIn order to check the Search is working\r\n\tAs a user\r\n\tI want to be given Search " +
                    "results correctly", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Inputting valid text in the Search bar")]
        [NUnit.Framework.CategoryAttribute("searchBar")]
        [NUnit.Framework.CategoryAttribute("happyPath")]
        [NUnit.Framework.TestCaseAttribute("Maths", "Maths", null)]
        public virtual void InputtingValidTextInTheSearchBar(string inputWord, string outputWord, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "searchBar",
                    "happyPath"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Inputting valid text in the Search bar", @__tags);
#line 8
this.ScenarioSetup(scenarioInfo);
#line 9
 testRunner.Given("I am a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 10
 testRunner.And("I navigate to the \'http://link.springer.com\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
 testRunner.When(string.Format("I search for the {0}", inputWord), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 12
 testRunner.Then(string.Format("I receive search results with the {0} in a title", outputWord), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Negative test - Inputting special characters in the Search bar")]
        [NUnit.Framework.CategoryAttribute("searchBar")]
        [NUnit.Framework.CategoryAttribute("negativePath")]
        [NUnit.Framework.TestCaseAttribute("!£$%^&", "Sorry", null)]
        public virtual void NegativeTest_InputtingSpecialCharactersInTheSearchBar(string invalidWords, string outputWord, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "searchBar",
                    "negativePath"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Negative test - Inputting special characters in the Search bar", @__tags);
#line 20
this.ScenarioSetup(scenarioInfo);
#line 21
 testRunner.Given("I am a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 22
 testRunner.And("I navigate to the \'http://link.springer.com\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 23
 testRunner.When(string.Format("I search for the {0}", invalidWords), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 24
 testRunner.Then(string.Format("I receive search results with the sorry message {0}", outputWord), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Inputting valid texts in the Advanced Search fields")]
        [NUnit.Framework.CategoryAttribute("advancedSearch")]
        [NUnit.Framework.CategoryAttribute("happyPath")]
        [NUnit.Framework.TestCaseAttribute("Maths", "", "", "", "", "", "Maths", null)]
        [NUnit.Framework.TestCaseAttribute("", "English", "", "", "", "", "English", null)]
        [NUnit.Framework.TestCaseAttribute("", "", "Physics", "", "", "", "Physics", null)]
        [NUnit.Framework.TestCaseAttribute("", "", "", "Science", "", "", "N/A", null)]
        [NUnit.Framework.TestCaseAttribute("", "", "", "", "Palgrave", "", "Palgrave", null)]
        [NUnit.Framework.TestCaseAttribute("", "", "", "", "", "Christian", "Christian", null)]
        public virtual void InputtingValidTextsInTheAdvancedSearchFields(string all, string exactPhrase, string oneOfTheWords, string without, string title, string authorEditor, string outputWord, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "advancedSearch",
                    "happyPath"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Inputting valid texts in the Advanced Search fields", @__tags);
#line 32
this.ScenarioSetup(scenarioInfo);
#line 33
 testRunner.Given("I am a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 34
 testRunner.And("I navigate to the \'https://link.springer.com/advanced-search\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 35
 testRunner.When(string.Format("I search each field individually: {0}, {1}, {2}, {3}, {4}, {5}", all, exactPhrase, oneOfTheWords, without, title, authorEditor), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 36
 testRunner.Then(string.Format("I receive search results with the {0} in a title", outputWord), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Negative test - Inputting special characters in the Advanced Search fields")]
        [NUnit.Framework.CategoryAttribute("advancedSearch")]
        [NUnit.Framework.CategoryAttribute("negativePath")]
        [NUnit.Framework.TestCaseAttribute("!£$%^&", "", "", "", "", "", "Sorry", null)]
        [NUnit.Framework.TestCaseAttribute("", "!£$%^&", "", "", "", "", "Sorry", null)]
        [NUnit.Framework.TestCaseAttribute("", "", "!£$%^&", "", "", "", "Sorry", null)]
        [NUnit.Framework.TestCaseAttribute("", "", "", "!£$%^&", "", "", "Sorry", null)]
        [NUnit.Framework.TestCaseAttribute("", "", "", "", "!£$%^&", "", "Sorry", null)]
        [NUnit.Framework.TestCaseAttribute("", "", "", "", "", "!£$%^&", "Sorry", null)]
        public virtual void NegativeTest_InputtingSpecialCharactersInTheAdvancedSearchFields(string all, string exactPhrase, string oneOfTheWords, string without, string title, string authorEditor, string outputWord, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "advancedSearch",
                    "negativePath"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Negative test - Inputting special characters in the Advanced Search fields", @__tags);
#line 49
this.ScenarioSetup(scenarioInfo);
#line 50
 testRunner.Given("I am a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 51
 testRunner.And("I navigate to the \'https://link.springer.com/advanced-search\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 52
 testRunner.When(string.Format("I search each field individually with an invalid text: {0}, {1}, {2}, {3}, {4}, {" +
                        "5}", all, exactPhrase, oneOfTheWords, without, title, authorEditor), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 53
 testRunner.Then(string.Format("I receive search results with the sorry message {0}", outputWord), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Inputting valid date in the Published date field")]
        [NUnit.Framework.CategoryAttribute("advancedSearch")]
        [NUnit.Framework.CategoryAttribute("happyPath")]
        [NUnit.Framework.TestCaseAttribute("2017", "2017", null)]
        public virtual void InputtingValidDateInThePublishedDateField(string publishDate, string outputWord, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "advancedSearch",
                    "happyPath"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Inputting valid date in the Published date field", @__tags);
#line 66
this.ScenarioSetup(scenarioInfo);
#line 67
 testRunner.Given("I am a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 68
 testRunner.And("I navigate to the \'https://link.springer.com/advanced-search\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 69
 testRunner.When(string.Format("I input a valid date in the {0}", publishDate), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 70
 testRunner.Then(string.Format("I receive search results with books of the pulished date {0}", outputWord), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Inputting invalid date in the Published date field")]
        [NUnit.Framework.CategoryAttribute("advancedSearch")]
        [NUnit.Framework.CategoryAttribute("negativePath")]
        [NUnit.Framework.TestCaseAttribute("2018", "sorry", null)]
        public virtual void InputtingInvalidDateInThePublishedDateField(string publishDate, string outputWord, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "advancedSearch",
                    "negativePath"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Inputting invalid date in the Published date field", @__tags);
#line 78
this.ScenarioSetup(scenarioInfo);
#line 79
 testRunner.Given("I am a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 80
 testRunner.And("I navigate to the \'https://link.springer.com/advanced-search\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 81
 testRunner.When(string.Format("I input an invalid date in the {0}", publishDate), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 82
 testRunner.Then(string.Format("I receive search results with the sorry message {0}", outputWord), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
